<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.kk.apollo.biz.dao.comment.CommentMapper">
    <resultMap id="BaseResultMap" type="com.kk.apollo.biz.model.comment.Comment">
        <id column="comment_id" property="commentId" jdbcType="INTEGER"/>
        <result column="comment_content" property="commentContent" jdbcType="VARCHAR"/>
        <result column="user_id" property="userId" jdbcType="INTEGER"/>
        <result column="activity_id" property="activityId" jdbcType="INTEGER"/>
        <result column="comment_time" property="commentTime" jdbcType="TIMESTAMP"/>
        <result column="comment_like" property="commentLike" jdbcType="INTEGER"/>
        <result column="comment_dislike" property="commentDislike" jdbcType="INTEGER"/>
    </resultMap>
    <resultMap id="CommentVoMap" type="com.kk.apollo.biz.model.comment.CommentVo">
        <id column="comment_id" property="commentId" jdbcType="INTEGER"/>
        <result column="comment_content" property="commentContent" jdbcType="VARCHAR"/>
        <result column="user_id" property="userId" jdbcType="INTEGER"/>
        <result column="comment_time" property="commentTime" jdbcType="TIMESTAMP"/>
        <result column="comment_like" property="commentLike" jdbcType="INTEGER"/>
        <result column="comment_dislike" property="commentDislike" jdbcType="INTEGER"/>
        <result column="user_nickname" property="userNickname" jdbcType="VARCHAR"/>
        <result column="user_avatar" property="userAvatar" jdbcType="VARCHAR"/>
    </resultMap>
    <sql id="Base_Column_List">
    comment_id, comment_content, user_id, activity_id, comment_time, comment_like, comment_dislike
  </sql>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        from comment
        where comment_id = #{commentId,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from comment
    where comment_id = #{commentId,jdbcType=INTEGER}
  </delete>
    <insert id="insert" parameterType="com.kk.apollo.biz.model.comment.Comment">
    insert into comment (comment_id, comment_content, user_id,
    activity_id, comment_time, comment_like,
    comment_dislike)
    values (#{commentId,jdbcType=INTEGER}, #{commentContent,jdbcType=VARCHAR}, #{userId,jdbcType=INTEGER},
    #{activityId,jdbcType=INTEGER}, #{commentTime,jdbcType=TIMESTAMP}, #{commentLike,jdbcType=INTEGER},
    #{commentDislike,jdbcType=INTEGER})
  </insert>
    <insert id="insertSelective" parameterType="com.kk.apollo.biz.model.comment.Comment" keyProperty="commentId"
            useGeneratedKeys="true">
        insert into comment
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="commentContent != null">
                comment_content,
            </if>
            <if test="userId != null">
                user_id,
            </if>
            <if test="activityId != null">
                activity_id,
            </if>
            <if test="commentTime != null">
                comment_time,
            </if>
            <if test="commentLike != null">
                comment_like,
            </if>
            <if test="commentDislike != null">
                comment_dislike,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="commentId != null">
                #{commentId,jdbcType=INTEGER},
            </if>
            <if test="commentContent != null">
                #{commentContent,jdbcType=VARCHAR},
            </if>
            <if test="userId != null">
                #{userId,jdbcType=INTEGER},
            </if>
            <if test="activityId != null">
                #{activityId,jdbcType=INTEGER},
            </if>
            <if test="commentTime != null">
                #{commentTime,jdbcType=TIMESTAMP},
            </if>
            <if test="commentLike != null">
                #{commentLike,jdbcType=INTEGER},
            </if>
            <if test="commentDislike != null">
                #{commentDislike,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.kk.apollo.biz.model.comment.Comment">
        update comment
        <set>
            <if test="commentContent != null">
                comment_content = #{commentContent,jdbcType=VARCHAR},
            </if>
            <if test="userId != null">
                user_id = #{userId,jdbcType=INTEGER},
            </if>
            <if test="activityId != null">
                activity_id = #{activityId,jdbcType=INTEGER},
            </if>
            <if test="commentTime != null">
                comment_time = #{commentTime,jdbcType=TIMESTAMP},
            </if>
            <if test="commentLike != null">
                comment_like = #{commentLike,jdbcType=INTEGER},
            </if>
            <if test="commentDislike != null">
                comment_dislike = #{commentDislike,jdbcType=INTEGER},
            </if>
        </set>
        where comment_id = #{commentId,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.kk.apollo.biz.model.comment.Comment">
    update comment
    set comment_content = #{commentContent,jdbcType=VARCHAR},
      user_id = #{userId,jdbcType=INTEGER},
      activity_id = #{activityId,jdbcType=INTEGER},
      comment_time = #{commentTime,jdbcType=TIMESTAMP},
      comment_like = #{commentLike,jdbcType=INTEGER},
      comment_dislike = #{commentDislike,jdbcType=INTEGER}
    where comment_id = #{commentId,jdbcType=INTEGER}
  </update>
    <select id="findCommentsByActivityId" resultMap="CommentVoMap">
        select
        comment_id, comment_content, comment.user_id, comment_time, comment_like, comment_dislike ,user_nickname , user_avatar
        from
        comment , user
        where
        comment.activity_id = #{0}
        AND
        comment.user_id = user.user_id
        order by
        comment_time DESC
    </select>
    <select id="findCommentVoById" resultMap="CommentVoMap">
        select
        comment_id, comment_content, comment.user_id, comment_time, comment_like, comment_dislike ,user_nickname , user_avatar
        from
        comment , user
        where
        comment.comment_id = #{0}
        AND
        comment.user_id = user.user_id
    </select>

    <select id="findByConditions" resultMap="CommentVoMap"
            parameterType="com.kk.apollo.biz.model.common.FindConditions">
        select
        comment_id, comment_content, comment.user_id, comment_time, comment_like, comment_dislike ,user_nickname ,
        user_avatar
        from
        comment , user
        <where>
            comment.user_id = user.user_id
            <if test="key != null and key != '' and value!=null and value!=''">
                AND ${key} Like '%${value}%'
            </if>
            <if test="data != null ">
                <if test="data.activityId != null  and data.activityId != ''">
                    AND comment.activity_id = #{data.activityId}
                </if>
            </if>
        </where>
        <if test="orderBy != null and orderBy != ''">
            ORDER By ${orderBy}
            <if test="isDesc != null and isDesc == 'true'">
                DESC
            </if>
        </if>
        <if test="pageIndexNum != null">
            LIMIT #{pageIndexNum},#{pageSize}
        </if>
    </select>

    <select id="countAll" resultType="java.lang.Integer">
        select
        count(comment_id)
        from
        comment
        <where>
            <if test="key != null and key != '' and value!=null and value!=''">
                AND ${key} Like '%${value}%'
            </if>
            <if test="data != null ">
                <if test="data.activityId != null  and data.activityId != ''">
                    AND comment.activity_id = #{data.activityId}
                </if>
            </if>
        </where>
    </select>
</mapper>